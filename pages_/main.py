import pandas as pd
import streamlit as st
import cv2
import numpy as np
import requests
import json
from PIL import Image

# HTML-–∫–æ–¥ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
html_code = '''
<div style="text-align: center;">
    <a href="https://raw.githubusercontent.com/Y1OV/DFO_front/main/lct/rosatom-logo-brandlogos.net.png">
        <img src="https://raw.githubusercontent.com/Y1OV/DFO_front/main/lct/rosatom-logo-brandlogos.net.png" alt="Foo" style="width: 50%; height: auto;">
    </a>
</div>
'''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞–º–æ–∫ –≤–æ–∫—Ä—É–≥ –¥–µ—Ñ–µ–∫—Ç–æ–≤
def draw_bounding_box(image, box, class_id, class_names, colors, box_thickness=3, font_scale=0.8, font_thickness=2):
    height, width, _ = image.shape
    x_center, y_center, w, h = box

    xmin = int((x_center - w / 2) * width)
    xmax = int((x_center + w / 2) * width)
    ymin = int((y_center - h / 2) * height)
    ymax = int((y_center + h / 2) * height)

    color = colors[class_id]

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, box_thickness)

    label = f"{class_names[class_id]}"
    (label_width, label_height), baseline = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, font_scale, font_thickness)

    cv2.rectangle(image, (xmin, ymin - label_height - baseline), (xmin + label_width, ymin), color, cv2.FILLED)
    cv2.putText(image, label, (xmin, ymin - baseline), cv2.FONT_HERSHEY_SIMPLEX, font_scale, (255, 255, 255), font_thickness)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
def visualize_annotations(image, annotations, class_names, colors, box_thickness=3, font_scale=0.8, font_thickness=2):
    image = np.array(image)
    unique_class_ids = set()
    for annotation in annotations:
        class_id = int(annotation['class_id'])
        unique_class_ids.add(class_id)
        box = (annotation['rel_x'], annotation['rel_y'], annotation['width'], annotation['height'])
        draw_bounding_box(image, box, class_id, class_names, colors, box_thickness, font_scale, font_thickness)

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    unique_classes = [class_names[id] for id in unique_class_ids]
    return image, unique_classes

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–µ—Ñ–µ–∫—Ç–∞–º
def get_recommendations(unique_classes):
    recommendations_dict = {
        'adj': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —á–∏—Å—Ç–æ—Ç—É —Å–≤–∞—Ä–æ—á–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∞–Ω—Ç–∏–ø—Ä–∏–≥–∞—Ä–Ω—ã–µ —Å–ø—Ä–µ–∏ –∏–ª–∏ –ø–∞—Å—Ç—ã. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –¥—É–≥–∏ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π –¥—É–≥–∏.",
        'int': "–ó–∞–≤–µ—Ä—à–∞–π—Ç–µ —Å–≤–∞—Ä–∫—É —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫—Ä–∞—Ç–µ—Ä–∞. –û—á–∏—Å—Ç–∏—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –æ—Ç —à–ª–∞–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞. –£–ª—É—á—à–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫—Ä–∞–µ–≤. –ò–∑–±–µ–≥–∞–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤ —Å–≤–∞—Ä–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö. –£–º–µ–Ω—å—à–∏—Ç–µ —Ç–æ–∫ –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –ø—Ä–æ–≤–æ–ª–æ–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —á–∏—Å—Ç–æ—Ç—É —Å–≤–∞—Ä–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
        'geo': "–£–º–µ–Ω—å—à–∏—Ç–µ —Ç–æ–∫ –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–∞—Ä–∫–∏. –£–ª—É—á—à–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫—Ä–∞–µ–≤. –£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–∞—Ä–∫–∏ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–æ–¥–∞—á—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–∏—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º —Ç–µ–ø–ª–∞ –∏ –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.",
        'pro': "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ–∑–∫–∏ –∏ —à–ª–∏—Ñ–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—É—Å–µ–Ω—Ü–µ–≤. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å—é —Ä–µ–∑–∫–∏ –∏ —Ñ–æ—Ä–º–æ–≤–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –æ—Å—Ç—Ä–æ—Ç–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –≥–æ—Ç–æ–≤—ã–º–∏ –∏–∑–¥–µ–ª–∏—è–º–∏.",
        'non': "–£–ª—É—á—à–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫—Ä–∞–µ–≤ –∏ —Å—Ç—ã–∫–æ–≤–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–∞—Ä–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫—Ä–∞–µ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    }
    recommendations = {}
    for cls in unique_classes:
        if cls in recommendations_dict:
            recommendations[cls] = recommendations_dict[cls]
    return recommendations

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤")

    st.markdown(html_code, unsafe_allow_html=True)

    st.text_area(
        "‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, "
        "–∏—Å–ø–æ–ª—å–∑—É—è YoLOv10 –∏ RTDETR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –¥–µ—Ç–µ–∫—Ü–∏–∏,"
        "–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏.",
        height=100
    )

    tab1, tab2 = st.tabs(["YoLOv10üòéüìä", "RTDETRüöÄüíª"])

    with tab1:
        st.title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        uploaded_image = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"],key="uploader1")

        class_names = ['adj', 'int', 'geo', 'pro', 'non']
        colors = {
            0: (255, 0, 255),
            1: (255, 0, 0),
            2: (0, 255, 0),    
            3: (0, 0, 255),  
            4: (255, 255, 0)
        }
    

        if st.button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã", key="single_button_1"):

            if uploaded_image is not None:
                image = Image.open(uploaded_image)
                img_array = np.array(image)
                _, img_encoded = cv2.imencode('.jpg', img_array)
                img_bytes = img_encoded.tobytes()

                addr = 'https://6152-83-143-66-61.ngrok-free.app'
                test_url = addr + '/api/test'
                content_type = 'image/jpeg'
                headers = {'content-type': content_type}

                response = requests.post(test_url, data=img_bytes, headers=headers)

                if response.status_code == 200:
                    annotations = json.loads(response.text)

                    annotated_image, unique_classes = visualize_annotations(image, annotations, class_names, colors)

                    st.image(annotated_image, caption='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏', use_column_width=True)

                    if unique_classes:
                        unique_classes_str = ', '.join(unique_classes)
                        st.text(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {unique_classes_str}")

                        st.markdown(
                            f"<span style='color:yellow'>{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'}</span>",
                            unsafe_allow_html=True
                        )
                        recommendations = get_recommendations(unique_classes)
                        
                        for cls, rec in recommendations.items():
                            st.text_area(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {cls}", rec, height=100)
                    else:
                        st.text("–î–µ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –æ—Ç API.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    with tab2:
        st.title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        uploaded_image = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"], key="uploader2")

        class_names = ['adj', 'int', 'geo', 'pro', 'non']
        colors = {
            0: (255, 0, 0),    # adj - –∫—Ä–∞—Å–Ω—ã–π
            1: (0, 255, 0),    # int - –∑–µ–ª–µ–Ω—ã–π
            2: (0, 0, 255),    # geo - —Å–∏–Ω–∏–π
            3: (255, 255, 0),  # pro - –∂–µ–ª—Ç—ã–π
            4: (255, 0, 255)   # non - –ø—É—Ä–ø—É—Ä–Ω—ã–π
        }

        if st.button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã", key="single_button_2"):

            if uploaded_image is not None:
                image = Image.open(uploaded_image)
                img_array = np.array(image)
                _, img_encoded = cv2.imencode('.jpg', img_array)
                img_bytes = img_encoded.tobytes()

                addr = 'https://6152-83-143-66-61.ngrok-free.app'
                test_url = addr + '/api/test'
                content_type = 'image/jpeg'
                headers = {'content-type': content_type}

                response = requests.post(test_url, data=img_bytes, headers=headers)

                if response.status_code == 200:
                    annotations = json.loads(response.text)

                    annotated_image, unique_classes = visualize_annotations(image, annotations, class_names, colors)

                    st.image(annotated_image, caption='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏', use_column_width=True)

                    if unique_classes:
                        unique_classes_str = ', '.join(unique_classes)
                        st.text(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {unique_classes_str}")

                        st.markdown(
                            f"<span style='color:yellow'>{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'}</span>",
                            unsafe_allow_html=True
                        )
                        recommendations = get_recommendations(unique_classes)
                        
                        for cls, rec in recommendations.items():
                            st.text_area(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {cls}", rec, height=100)
                    else:
                        st.text("–î–µ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –æ—Ç API.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
if __name__ == "__main__":
    main()
